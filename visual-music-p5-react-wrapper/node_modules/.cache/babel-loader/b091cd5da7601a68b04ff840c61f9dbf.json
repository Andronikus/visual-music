{"ast":null,"code":"import _objectSpread from \"/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/src/pages/App/App.js\";\nimport React from \"react\";\nimport SoundPlayer from \"../../components/SoundPlayer/SoundPlayer.component\";\nimport Visualizer from \"../../components/Visualizer/Visualizer.component\";\nimport \"./App.css\";\nimport UploadSong from \"../../components/UploadSong\";\nlet soundReset = {\n  isPlaying: false,\n  buttonText: \"Play\"\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onVolumeChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.onPlayPress = event => {\n      const uploadedSong = this.state.uploadedSong;\n\n      if (uploadedSong) {\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        }, () => {\n          this.setState({\n            buttonText: this.state.isPlaying ? \"Pause\" : \"Play\"\n          });\n        });\n      } else {\n        alert(\"No file loaded\");\n      }\n    };\n\n    this.onFileUpload = event => {\n      const song = event.target.files[0];\n      this.setState(_objectSpread({\n        uploadedSong: song,\n        isSongLoaded: true\n      }, soundReset));\n    };\n\n    this.state = _objectSpread({\n      uploadedSong: null,\n      isSongLoaded: false,\n      volume: 0.5\n    }, soundReset);\n  }\n  /********************************************\n        Handles changing of volume state upon\n        slider interaction. State changes are sent to\n        sketch file adjusting the sound's actual\n        volume to change ellipse diameter on redraw.\n    ********************************************/\n\n\n  render() {\n    const _this$state = this.state,\n          uploadedSong = _this$state.uploadedSong,\n          isSongLoaded = _this$state.isSongLoaded,\n          volume = _this$state.volume,\n          isPlaying = _this$state.isPlaying,\n          buttonText = _this$state.buttonText,\n          onSongEnd = _this$state.onSongEnd;\n    return React.createElement(\"div\", {\n      className: \"visualmusic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Visualizer, {\n      volume: volume,\n      isPlaying: isPlaying,\n      uploadedSong: uploadedSong,\n      onSongEnd: onSongEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(SoundPlayer, {\n      volume: volume,\n      buttonText: buttonText,\n      onPlayPress: this.onPlayPress,\n      onVolumeChange: this.onVolumeChange,\n      onFileUpload: this.onFileUpload,\n      isSongLoaded: isSongLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(UploadSong, {\n      onFileUpload: this.onFileUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/src/pages/App/App.js"],"names":["React","SoundPlayer","Visualizer","UploadSong","soundReset","isPlaying","buttonText","App","Component","constructor","onVolumeChange","event","target","name","value","setState","onPlayPress","uploadedSong","state","alert","onFileUpload","song","files","isSongLoaded","volume","render","onSongEnd"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oDAAxB;AACA,OAAOC,UAAP,MAAuB,kDAAvB;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAE,KADI;AAEfC,EAAAA,UAAU,EAAE;AAFG,CAAjB;;AAKA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAiBdC,cAjBc,GAiBGC,KAAK,IAAI;AAAA,4BACAA,KAAK,CAACC,MADN;AAAA,YAChBC,IADgB,iBAChBA,IADgB;AAAA,YACVC,KADU,iBACVA,KADU;AAExB,WAAKC,QAAL,CAAc;AAAE,SAACF,IAAD,GAAQC;AAAV,OAAd;AACD,KApBa;;AAAA,SA6BdE,WA7Bc,GA6BAL,KAAK,IAAI;AAAA,YACbM,YADa,GACI,KAAKC,KADT,CACbD,YADa;;AAGrB,UAAIA,YAAJ,EAAkB;AAChB,aAAKF,QAAL,CAAc;AAAEV,UAAAA,SAAS,EAAE,CAAC,KAAKa,KAAL,CAAWb;AAAzB,SAAd,EAAoD,MAAM;AACxD,eAAKU,QAAL,CAAc;AAAET,YAAAA,UAAU,EAAE,KAAKY,KAAL,CAAWb,SAAX,GAAuB,OAAvB,GAAiC;AAA/C,WAAd;AACD,SAFD;AAGD,OAJD,MAIO;AACLc,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACF,KAvCa;;AAAA,SA8CdC,YA9Cc,GA8CCT,KAAK,IAAI;AACtB,YAAMU,IAAI,GAAGV,KAAK,CAACC,MAAN,CAAaU,KAAb,CAAmB,CAAnB,CAAb;AACA,WAAKP,QAAL;AAAgBE,QAAAA,YAAY,EAAEI,IAA9B;AAAoCE,QAAAA,YAAY,EAAE;AAAlD,SAA2DnB,UAA3D;AACD,KAjDa;;AAGZ,SAAKc,KAAL;AACED,MAAAA,YAAY,EAAE,IADhB;AAEEM,MAAAA,YAAY,EAAE,KAFhB;AAGEC,MAAAA,MAAM,EAAE;AAHV,OAIKpB,UAJL;AAMD;AAED;;;;;;;;AAwCAqB,EAAAA,MAAM,GAAG;AAAA,wBAQH,KAAKP,KARF;AAAA,UAELD,YAFK,eAELA,YAFK;AAAA,UAGLM,YAHK,eAGLA,YAHK;AAAA,UAILC,MAJK,eAILA,MAJK;AAAA,UAKLnB,SALK,eAKLA,SALK;AAAA,UAMLC,UANK,eAMLA,UANK;AAAA,UAOLoB,SAPK,eAOLA,SAPK;AASP,WACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEF,MADV;AAEE,MAAA,SAAS,EAAEnB,SAFb;AAGE,MAAA,YAAY,EAAEY,YAHhB;AAIE,MAAA,SAAS,EAAES,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,WAAD;AACE,MAAA,MAAM,EAAEF,MADV;AAEE,MAAA,UAAU,EAAElB,UAFd;AAGE,MAAA,WAAW,EAAE,KAAKU,WAHpB;AAIE,MAAA,cAAc,EAAE,KAAKN,cAJvB;AAKE,MAAA,YAAY,EAAE,KAAKU,YALrB;AAME,MAAA,YAAY,EAAEG,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAeE,oBAAC,UAAD;AAAY,MAAA,YAAY,EAAE,KAAKH,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADF;AAmBD;;AAhF+B;;AAmFlC,eAAeb,GAAf","sourcesContent":["import React from \"react\";\nimport SoundPlayer from \"../../components/SoundPlayer/SoundPlayer.component\";\nimport Visualizer from \"../../components/Visualizer/Visualizer.component\";\nimport \"./App.css\";\nimport UploadSong from \"../../components/UploadSong\";\n\nlet soundReset = {\n  isPlaying: false,\n  buttonText: \"Play\"\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      uploadedSong: null,\n      isSongLoaded: false,\n      volume: 0.5,\n      ...soundReset\n    };\n  }\n\n  /********************************************\n        Handles changing of volume state upon\n        slider interaction. State changes are sent to\n        sketch file adjusting the sound's actual\n        volume to change ellipse diameter on redraw.\n    ********************************************/\n  onVolumeChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  /*********************************************\n        Handles toggling of pause/play button.\n        Used to monitor if the user wants to pause/play\n        the loaded sound. State changes are sent to\n        sketch file which executes a .pause() or .play()\n        command.\n    *********************************************/\n  onPlayPress = event => {\n    const { uploadedSong } = this.state;\n\n    if (uploadedSong) {\n      this.setState({ isPlaying: !this.state.isPlaying }, () => {\n        this.setState({ buttonText: this.state.isPlaying ? \"Pause\" : \"Play\" });\n      });\n    } else {\n      alert(\"No file loaded\");\n    }\n  };\n\n  /********************************************\n        Handle file uploads. Uploaded file is saved\n        as state and is passed down to the sketch file as props.\n        Sketch then loads the file using p5.Sound library.\n    *********************************************/\n  onFileUpload = event => {\n    const song = event.target.files[0];\n    this.setState({ uploadedSong: song, isSongLoaded: true, ...soundReset });\n  };\n\n  render() {\n    const {\n      uploadedSong,\n      isSongLoaded,\n      volume,\n      isPlaying,\n      buttonText,\n      onSongEnd\n    } = this.state;\n    return (\n      <div className=\"visualmusic\">\n        <Visualizer\n          volume={volume}\n          isPlaying={isPlaying}\n          uploadedSong={uploadedSong}\n          onSongEnd={onSongEnd}\n        />\n        <SoundPlayer\n          volume={volume}\n          buttonText={buttonText}\n          onPlayPress={this.onPlayPress}\n          onVolumeChange={this.onVolumeChange}\n          onFileUpload={this.onFileUpload}\n          isSongLoaded={isSongLoaded}\n        />\n        <UploadSong onFileUpload={this.onFileUpload} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
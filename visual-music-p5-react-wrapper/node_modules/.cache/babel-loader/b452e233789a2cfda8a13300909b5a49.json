{"ast":null,"code":"import _objectSpread from \"/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/src/pages/App/App.js\";\nimport React from 'react';\nimport SoundPlayer from '../../components/SoundPlayer/SoundPlayer.component';\nimport Visualizer from '../../components/Visualizer/Visualizer.component';\nimport './App.css';\nlet soundReset = {\n  isPlaying: false,\n  buttonText: 'Play'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onVolumeChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.onPlayPress = event => {\n      const uploadedSong = this.state.uploadedSong;\n\n      if (uploadedSong) {\n        this.setState({\n          isPlaying: !this.state.isPlaying\n        }, () => {\n          this.setState({\n            buttonText: this.state.isPlaying ? 'Pause' : 'Play'\n          });\n        });\n      } else {\n        alert('No file loaded');\n      }\n    };\n\n    this.onFileUpload = event => {\n      const song = event.target.files[0];\n      this.setState(_objectSpread({\n        uploadedSong: song,\n        isSongLoaded: true\n      }, soundReset));\n    };\n\n    this.state = _objectSpread({\n      uploadedSong: null,\n      isSongLoaded: false,\n      volume: 0.5\n    }, soundReset);\n  }\n  /********************************************\n         Handles changing of volume state upon\n         slider interaction. State changes are sent to\n         sketch file adjusting the sound's actual\n         volume to change ellipse diameter on redraw.\n     ********************************************/\n\n\n  render() {\n    const _this$state = this.state,\n          uploadedSong = _this$state.uploadedSong,\n          isSongLoaded = _this$state.isSongLoaded,\n          volume = _this$state.volume,\n          isPlaying = _this$state.isPlaying,\n          buttonText = _this$state.buttonText,\n          onSongEnd = _this$state.onSongEnd;\n    return React.createElement(\"div\", {\n      className: \"visualmusic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Visualizer, {\n      volume: volume,\n      isPlaying: isPlaying,\n      uploadedSong: uploadedSong,\n      onSongEnd: onSongEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(SoundPlayer, {\n      volume: volume,\n      buttonText: buttonText,\n      onPlayPress: this.onPlayPress,\n      onVolumeChange: this.onVolumeChange,\n      onFileUpload: this.onFileUpload,\n      isSongLoaded: isSongLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Askat/LEARNING/visual-music/visual-music-p5-react-wrapper/src/pages/App/App.js"],"names":["React","SoundPlayer","Visualizer","soundReset","isPlaying","buttonText","App","Component","constructor","onVolumeChange","event","target","name","value","setState","onPlayPress","uploadedSong","state","alert","onFileUpload","song","files","isSongLoaded","volume","render","onSongEnd"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oDAAxB;AACA,OAAOC,UAAP,MAAuB,kDAAvB;AACA,OAAO,WAAP;AAEA,IAAIC,UAAU,GAAG;AAChBC,EAAAA,SAAS,EAAE,KADK;AAEhBC,EAAAA,UAAU,EAAE;AAFI,CAAjB;;AAKA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AACjCC,EAAAA,WAAW,GAAG;AACb;;AADa,SAiBdC,cAjBc,GAiBGC,KAAK,IAAI;AAAA,4BACDA,KAAK,CAACC,MADL;AAAA,YACjBC,IADiB,iBACjBA,IADiB;AAAA,YACXC,KADW,iBACXA,KADW;AAEzB,WAAKC,QAAL,CAAc;AAAE,SAACF,IAAD,GAAQC;AAAV,OAAd;AACA,KApBa;;AAAA,SA6BdE,WA7Bc,GA6BAL,KAAK,IAAI;AAAA,YACdM,YADc,GACG,KAAKC,KADR,CACdD,YADc;;AAGtB,UAAIA,YAAJ,EAAkB;AACjB,aAAKF,QAAL,CAAc;AAAEV,UAAAA,SAAS,EAAE,CAAC,KAAKa,KAAL,CAAWb;AAAzB,SAAd,EAAoD,MAAM;AACzD,eAAKU,QAAL,CAAc;AAAET,YAAAA,UAAU,EAAE,KAAKY,KAAL,CAAWb,SAAX,GAAuB,OAAvB,GAAiC;AAA/C,WAAd;AACA,SAFD;AAGA,OAJD,MAIO;AACNc,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD,KAvCa;;AAAA,SA8CdC,YA9Cc,GA8CCT,KAAK,IAAI;AACvB,YAAMU,IAAI,GAAGV,KAAK,CAACC,MAAN,CAAaU,KAAb,CAAmB,CAAnB,CAAb;AACA,WAAKP,QAAL;AAAgBE,QAAAA,YAAY,EAAEI,IAA9B;AAAoCE,QAAAA,YAAY,EAAE;AAAlD,SAA2DnB,UAA3D;AACA,KAjDa;;AAGb,SAAKc,KAAL;AACCD,MAAAA,YAAY,EAAE,IADf;AAECM,MAAAA,YAAY,EAAE,KAFf;AAGCC,MAAAA,MAAM,EAAE;AAHT,OAIIpB,UAJJ;AAMA;AAED;;;;;;;;AAwCAqB,EAAAA,MAAM,GAAG;AAAA,wBAQJ,KAAKP,KARD;AAAA,UAEPD,YAFO,eAEPA,YAFO;AAAA,UAGPM,YAHO,eAGPA,YAHO;AAAA,UAIPC,MAJO,eAIPA,MAJO;AAAA,UAKPnB,SALO,eAKPA,SALO;AAAA,UAMPC,UANO,eAMPA,UANO;AAAA,UAOPoB,SAPO,eAOPA,SAPO;AASR,WACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,UAAD;AACC,MAAA,MAAM,EAAEF,MADT;AAEC,MAAA,SAAS,EAAEnB,SAFZ;AAGC,MAAA,YAAY,EAAEY,YAHf;AAIC,MAAA,SAAS,EAAES,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAOC,oBAAC,WAAD;AACC,MAAA,MAAM,EAAEF,MADT;AAEC,MAAA,UAAU,EAAElB,UAFb;AAGC,MAAA,WAAW,EAAE,KAAKU,WAHnB;AAIC,MAAA,cAAc,EAAE,KAAKN,cAJtB;AAKC,MAAA,YAAY,EAAE,KAAKU,YALpB;AAMC,MAAA,YAAY,EAAEG,YANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,CADD;AAkBA;;AA/EgC;;AAkFlC,eAAehB,GAAf","sourcesContent":["import React from 'react';\nimport SoundPlayer from '../../components/SoundPlayer/SoundPlayer.component';\nimport Visualizer from '../../components/Visualizer/Visualizer.component';\nimport './App.css';\n\nlet soundReset = {\n\tisPlaying: false,\n\tbuttonText: 'Play'\n};\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tuploadedSong: null,\n\t\t\tisSongLoaded: false,\n\t\t\tvolume: 0.5,\n\t\t\t...soundReset\n\t\t};\n\t}\n\n\t/********************************************\n        Handles changing of volume state upon\n        slider interaction. State changes are sent to\n        sketch file adjusting the sound's actual\n        volume to change ellipse diameter on redraw.\n    ********************************************/\n\tonVolumeChange = event => {\n\t\tconst { name, value } = event.target;\n\t\tthis.setState({ [name]: value });\n\t};\n\n\t/*********************************************\n        Handles toggling of pause/play button.\n        Used to monitor if the user wants to pause/play\n        the loaded sound. State changes are sent to\n        sketch file which executes a .pause() or .play()\n        command.\n    *********************************************/\n\tonPlayPress = event => {\n\t\tconst { uploadedSong } = this.state;\n\n\t\tif (uploadedSong) {\n\t\t\tthis.setState({ isPlaying: !this.state.isPlaying }, () => {\n\t\t\t\tthis.setState({ buttonText: this.state.isPlaying ? 'Pause' : 'Play' });\n\t\t\t});\n\t\t} else {\n\t\t\talert('No file loaded');\n\t\t}\n\t};\n\n\t/********************************************\n        Handle file uploads. Uploaded file is saved\n        as state and is passed down to the sketch file as props.\n        Sketch then loads the file using p5.Sound library.\n    *********************************************/\n\tonFileUpload = event => {\n\t\tconst song = event.target.files[0];\n\t\tthis.setState({ uploadedSong: song, isSongLoaded: true, ...soundReset });\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tuploadedSong,\n\t\t\tisSongLoaded,\n\t\t\tvolume,\n\t\t\tisPlaying,\n\t\t\tbuttonText,\n\t\t\tonSongEnd\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<div className='visualmusic'>\n\t\t\t\t<Visualizer\n\t\t\t\t\tvolume={volume}\n\t\t\t\t\tisPlaying={isPlaying}\n\t\t\t\t\tuploadedSong={uploadedSong}\n\t\t\t\t\tonSongEnd={onSongEnd}\n\t\t\t\t/>\n\t\t\t\t<SoundPlayer\n\t\t\t\t\tvolume={volume}\n\t\t\t\t\tbuttonText={buttonText}\n\t\t\t\t\tonPlayPress={this.onPlayPress}\n\t\t\t\t\tonVolumeChange={this.onVolumeChange}\n\t\t\t\t\tonFileUpload={this.onFileUpload}\n\t\t\t\t\tisSongLoaded={isSongLoaded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}